use std::sync::Arc;

use deku::DekuContainerRead;
use tokio::sync::Mutex;

use crate::{
    commands::lobby::show_inventory::{ShowInventory, ShowInventoryOk},
    handlers::CommandHandler,
    impl_packet_handler,
    server::{Server, Session},
};

pub struct ShowInventoryHandler {}
impl CommandHandler for ShowInventoryHandler {
    type CommandType = ShowInventory;
    async fn handle_command(
        _server: Arc<Mutex<Server>>,
        session: Arc<Mutex<Session>>,
        _command: &Self::CommandType,
    ) -> Result<(), String> {
        let pcap_data: [u8; 498] = [
            0x1F, 0x4A, 0x75, 0x00, 0x02, 0x4A, 0x75, 0x00, 0x00, 0xB8, 0x1B, 0x01, 0x00, 0x01,
            0x00, 0x00, 0x00, 0xB0, 0x9A, 0x00, 0x02, 0xB0, 0x9A, 0x00, 0x00, 0xB8, 0x1B, 0x01,
            0x00, 0x01, 0x00, 0x00, 0x00, 0x14, 0x9B, 0x00, 0x02, 0x14, 0x9B, 0x00, 0x00, 0xB8,
            0x1B, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x78, 0x9B, 0x00, 0x02, 0x78, 0x9B, 0x00,
            0x00, 0xB8, 0x1B, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x79, 0x9B, 0x00, 0x02, 0x79,
            0x9B, 0x00, 0x00, 0xB8, 0x1B, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x7A, 0x9B, 0x00,
            0x02, 0x7A, 0x9B, 0x00, 0x00, 0xB8, 0x1B, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x7B,
            0x9B, 0x00, 0x02, 0x7B, 0x9B, 0x00, 0x00, 0xB8, 0x1B, 0x01, 0x00, 0x01, 0x00, 0x00,
            0x00, 0x7C, 0x9B, 0x00, 0x02, 0x7C, 0x9B, 0x00, 0x00, 0xB8, 0x1B, 0x01, 0x00, 0x01,
            0x00, 0x00, 0x00, 0x7D, 0x9B, 0x00, 0x02, 0x7D, 0x9B, 0x00, 0x00, 0xB8, 0x1B, 0x01,
            0x00, 0x01, 0x00, 0x00, 0x00, 0x7E, 0x9B, 0x00, 0x02, 0x7E, 0x9B, 0x00, 0x00, 0xB8,
            0x1B, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x7F, 0x9B, 0x00, 0x02, 0x7F, 0x9B, 0x00,
            0x00, 0xB8, 0x1B, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x80, 0x9B, 0x00, 0x02, 0x80,
            0x9B, 0x00, 0x00, 0xB8, 0x1B, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x81, 0x9B, 0x00,
            0x02, 0x81, 0x9B, 0x00, 0x00, 0xB8, 0x1B, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0xE6,
            0x9B, 0x00, 0x02, 0xE6, 0x9B, 0x00, 0x00, 0xB8, 0x1B, 0x01, 0x00, 0x01, 0x00, 0x00,
            0x00, 0xE7, 0x9B, 0x00, 0x02, 0xE7, 0x9B, 0x00, 0x00, 0xB8, 0x1B, 0x01, 0x00, 0x01,
            0x00, 0x00, 0x00, 0xE8, 0x9B, 0x00, 0x02, 0xE8, 0x9B, 0x00, 0x00, 0xB8, 0x1B, 0x01,
            0x00, 0x01, 0x00, 0x00, 0x00, 0xE9, 0x9B, 0x00, 0x02, 0xE9, 0x9B, 0x00, 0x00, 0xB8,
            0x1B, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x42, 0x9C, 0x00, 0x02, 0x42, 0x9C, 0x00,
            0x00, 0xB8, 0x1B, 0x01, 0x00, 0x06, 0x00, 0x00, 0x00, 0x29, 0xA0, 0x00, 0x02, 0x29,
            0xA0, 0x00, 0x00, 0xB8, 0x1B, 0x01, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x2A, 0xA0, 0x00,
            0x02, 0x2A, 0xA0, 0x00, 0x00, 0xB8, 0x1B, 0x01, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x2B,
            0xA0, 0x00, 0x02, 0x2B, 0xA0, 0x00, 0x00, 0xB8, 0x1B, 0x01, 0x00, 0x10, 0x00, 0x00,
            0x00, 0x2C, 0xA0, 0x00, 0x02, 0x2C, 0xA0, 0x00, 0x00, 0xB8, 0x1B, 0x01, 0x00, 0x0A,
            0x00, 0x00, 0x00, 0x2E, 0xA0, 0x00, 0x02, 0x2E, 0xA0, 0x00, 0x00, 0xB8, 0x1B, 0x01,
            0x00, 0x21, 0x00, 0x00, 0x00, 0x2F, 0xA0, 0x00, 0x02, 0x2F, 0xA0, 0x00, 0x00, 0xB8,
            0x1B, 0x01, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x30, 0xA0, 0x00, 0x02, 0x30, 0xA0, 0x00,
            0x00, 0xB8, 0x1B, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x31, 0xA0, 0x00, 0x02, 0x31,
            0xA0, 0x00, 0x00, 0xB8, 0x1B, 0x01, 0x00, 0x06, 0x00, 0x00, 0x00, 0x11, 0xA4, 0x00,
            0x02, 0x11, 0xA4, 0x00, 0x00, 0xB8, 0x1B, 0x01, 0x00, 0x18, 0x00, 0x00, 0x00, 0xE1,
            0xAB, 0x00, 0x02, 0xE1, 0xAB, 0x00, 0x00, 0xB8, 0x1B, 0x01, 0x00, 0x05, 0x00, 0x00,
            0x00, 0xE5, 0xAB, 0x00, 0x02, 0xE5, 0xAB, 0x00, 0x00, 0xB8, 0x1B, 0x01, 0x00, 0x03,
            0x00, 0x00, 0x00, 0xC9, 0xAF, 0x00, 0x02, 0xC9, 0xAF, 0x00, 0x00, 0xB8, 0x1B, 0x01,
            0x00, 0x02, 0x00, 0x00, 0x00, 0x94, 0x5F, 0x01, 0x02, 0x94, 0x5F, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        ];
        let mut pcap = ShowInventoryOk::from_bytes((&pcap_data, 0))
            .map_err(|e| format!("Failed to deserialize pcap: {:?}", e))
            .map(|result| result.1)?;

        let mut session = session.lock().await;
        pcap.horses.vec = session
            .horses
            .as_ref()
            .ok_or("Player has no horses")?
            .clone();

        session
            .send_command(pcap)
            .await
            .map_err(|e| format!("Failed to send response: {:?}", e))
    }
}
impl_packet_handler!(ShowInventoryHandler);
