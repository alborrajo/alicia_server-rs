mod command;

use command::{Command, CommandId, Magic, BUFFER_SIZE};

use deku::DekuContainerWrite;
use pretty_hex::pretty_hex;
use tokio::{io::AsyncWriteExt, net::TcpListener};

use std::{error::Error, fmt::format};


#[tokio::main]
async fn main() -> Result<(), Box<dyn Error>> {
    // Next up we create a TCP listener which will listen for incoming
    // connections. This TCP listener is bound to the address we determined
    // above and must be associated with an event loop.
    let addr = "0.0.0.0:10030";
    let listener = TcpListener::bind(&addr).await?;
    println!("Listening on: {addr}");

    loop {
        // Asynchronously wait for an inbound socket.
        let (mut socket, _) = listener.accept().await?;

        // And this is where much of the magic of this server happens. We
        // crucially want all clients to make progress concurrently, rather than
        // blocking one on completion of another. To achieve this we use the
        // `tokio::spawn` function to execute the work in the background.
        //
        // Essentially here we're executing a new task to run concurrently,
        // which will allow all of our clients to be processed concurrently.
        tokio::spawn(async move {
            println!("New connection established");
            // In a loop, read data from the socket and write the data back.
            loop {
                let mut buf = vec![0; BUFFER_SIZE as usize];
                let command = Command::from_stream(&mut buf, &mut socket).await;
                if let Err(e) = command {
                    eprintln!("Error reading command: {}:\n\t{}", e, pretty_hex(&buf));
                    break;
                }

                // Process the command here
                let command = command.unwrap();
                println!("<<< Recv command {:?}:\n\t{}\n", command.magic.id, pretty_hex(&command.payload));

                let mut send_result = None;

                if command.magic.id == CommandId::AcCmdCLLogin {
                    send_result = Some(send_command(&mut buf, &mut socket, &mut Command {
                        magic: Magic {
                            id: CommandId::AcCmdCLLoginOK,
                            length: 0,
                        },
                        payload: vec![
                            0x2E, 0xC3, 0x87, 0xD6, 0x31, 0xD3, 0xDB, 0x01,  0x94, 0xA7, 0x0C, 0x00, 0xE8, 0xE2, 0x06, 0x00,
                            0x72, 0x67, 0x6E, 0x74, 0x00, 0x57, 0x65, 0x6C,  0x63, 0x6F, 0x6D, 0x65, 0x20, 0x74, 0x6F, 0x20,
                            0x53, 0x74, 0x6F, 0x72, 0x79, 0x20, 0x6F, 0x66,  0x20, 0x41, 0x6C, 0x69, 0x63, 0x69, 0x61, 0x21,
                            0x00, 0x01, 0x54, 0x68, 0x69, 0x73, 0x20, 0x70,  0x65, 0x72, 0x73, 0x6F, 0x6E, 0x20, 0x69, 0x73,
                            0x20, 0x6D, 0x65, 0x6E, 0x74, 0x61, 0x6C, 0x6C,  0x79, 0x20, 0x75, 0x6E, 0x73, 0x74, 0x61, 0x62,
                            0x6C, 0x65, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00,  0x38, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                            0x01, 0x00, 0x00, 0x00, 0x01, 0x28, 0x4E, 0x00,  0x02, 0x28, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00,
                            0x00, 0x01, 0x00, 0x00, 0x00, 0xA1, 0x00, 0xFF,  0x00, 0x00, 0x00, 0x30, 0x61, 0x00, 0x00, 0xFF,
                            0x00, 0x00, 0x00, 0xFF, 0x19, 0x00, 0x00, 0x00,  0x0C, 0x01, 0x00, 0x16, 0x57, 0x02, 0x00, 0x15,
                            0x41, 0x03, 0x00, 0x17, 0x44, 0x04, 0x00, 0x18,  0x53, 0x05, 0x00, 0x12, 0x13, 0x06, 0x00, 0x82,
                            0x83, 0x07, 0x00, 0x20, 0x2F, 0x08, 0x00, 0x46,  0x00, 0x09, 0x00, 0x52, 0x00, 0x0A, 0x00, 0x19,
                            0x00, 0x0B, 0x00, 0x0F, 0x00, 0x0C, 0x00, 0x43,  0x00, 0x2F, 0x77, 0x69, 0x6E, 0x6B, 0x2F, 0x77,
                            0x61, 0x76, 0x65, 0x00, 0x54, 0x68, 0x61, 0x6E,  0x6B, 0x20, 0x79, 0x6F, 0x75, 0x21, 0x20, 0x2F,
                            0x68, 0x65, 0x61, 0x72, 0x74, 0x00, 0x2F, 0x66,  0x69, 0x72, 0x65, 0x2F, 0x66, 0x69, 0x72, 0x65,
                            0x2F, 0x66, 0x69, 0x72, 0x65, 0x20, 0x46, 0x69,  0x72, 0x65, 0x21, 0x20, 0x2F, 0x66, 0x69, 0x72,
                            0x65, 0x2F, 0x66, 0x69, 0x72, 0x65, 0x2F, 0x66,  0x69, 0x72, 0x65, 0x00, 0x2F, 0x73, 0x61, 0x64,
                            0x2F, 0x63, 0x72, 0x79, 0x20, 0x53, 0x6F, 0x72,  0x72, 0x79, 0x21, 0x20, 0x2F, 0x63, 0x72, 0x79,
                            0x2F, 0x73, 0x61, 0x64, 0x00, 0x2F, 0x2D, 0x74,  0x61, 0x64, 0x61, 0x20, 0x43, 0x6F, 0x6E, 0x67,
                            0x72, 0x61, 0x74, 0x75, 0x6C, 0x61, 0x74, 0x69,  0x6F, 0x6E, 0x73, 0x21, 0x21, 0x21, 0x20, 0x2F,
                            0x74, 0x61, 0x64, 0x61, 0x00, 0x2F, 0x63, 0x6C,  0x61, 0x70, 0x20, 0x47, 0x6F, 0x6F, 0x64, 0x20,
                            0x47, 0x61, 0x6D, 0x65, 0x21, 0x20, 0x2F, 0x2D,  0x63, 0x6C, 0x61, 0x70, 0x00, 0x42, 0x65, 0x20,
                            0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x62, 0x61,  0x63, 0x6B, 0x21, 0x20, 0x50, 0x6C, 0x65, 0x61,
                            0x73, 0x65, 0x20, 0x77, 0x61, 0x69, 0x74, 0x20,  0x66, 0x6F, 0x72, 0x20, 0x6D, 0x65, 0x21, 0x20,
                            0x2F, 0x77, 0x69, 0x6E, 0x6B, 0x00, 0x53, 0x65,  0x65, 0x20, 0x79, 0x6F, 0x75, 0x21, 0x20, 0x2F,
                            0x73, 0x6D, 0x69, 0x6C, 0x65, 0x2F, 0x77, 0x61,  0x76, 0x65, 0x00, 0x64, 0x00, 0x00, 0x00, 0x13,
                            0x00, 0x07, 0x18, 0x00, 0x01, 0x02, 0x00, 0x00,  0x00, 0x01, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x01,
                            0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  0x23, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x01,
                            0x00, 0x00, 0x00, 0x29, 0x00, 0x01, 0x02, 0x00,  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2A, 0x00,
                            0x01, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  0x00, 0x2B, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00,
                            0x01, 0x00, 0x00, 0x00, 0x2E, 0x00, 0x01, 0x02,  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
                            0x7F, 0x00, 0x00, 0x01, 0x2E, 0x27, 0x00, 0x00,  0x00, 0x00, 0x0A, 0x01, 0x02, 0x01, 0xFF, 0xFF,
                            0x04, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00,  0xFF, 0x00, 0x96, 0xA3, 0x79, 0x05, 0x21, 0x4E,
                            0x00, 0x00, 0x69, 0x64, 0x6F, 0x6E, 0x74, 0x75,  0x6E, 0x64, 0x65, 0x72, 0x73, 0x74, 0x61, 0x6E,
                            0x64, 0x00, 0x01, 0x04, 0x04, 0x05, 0x00, 0x00,  0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x09,
                            0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x09,  0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00,
                            0x00, 0x00, 0x00, 0x15, 0x01, 0x05, 0x00, 0x00,  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
                            0xE8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0xE8, 0x03, 0x1E, 0x00, 0x0A, 0x00, 0x0A, 0x00,
                            0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0xE4, 0x67, 0xA1, 0xB8, 0x02, 0x00, 0xFF,
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0xFF, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
                            0x00, 0x00, 0x01, 0x00, 0xFE, 0x01, 0x00, 0x00,  0x21, 0x04, 0x00, 0x00, 0xF8, 0x05, 0x00, 0x00,
                            0xA4, 0xCF, 0x00, 0x00, 0xE4, 0x67, 0xA1, 0xB8,  0x00, 0x00, 0x00, 0x00, 0x0A, 0x06, 0x00, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00,  0x00, 0x04, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00,
                            0x00, 0x02, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00,  0x00, 0x30, 0x75, 0x00, 0x00, 0x35, 0x00, 0x00,
                            0x00, 0x04, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00,  0x00, 0x02, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00,
                            0x00, 0x04, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0E, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x04, 0x2B, 0x00, 0x00, 0x00,
                            0x04, 0x00, 0x00, 0x00, 0xDB, 0x87, 0x1B, 0xCA,  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x04, 0x96, 0xA3, 0x79, 0x05, 0x12, 0x00, 0x00,
                            0x00, 0xE4, 0x67, 0x6E, 0x01, 0x3A, 0x00, 0x00,  0x00, 0x8E, 0x03, 0x00, 0x00, 0xC6, 0x01, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                        ]
                    }).await);
                }

                if command.magic.id == CommandId::AcCmdCLShowInventory {
                    send_result = Some(send_command(&mut buf, &mut socket, &mut Command {
                        magic: Magic {
                            id: CommandId::AcCmdCLShowInventoryOK,
                            length: 0,
                        },
                        payload: vec![
                            0x1F, 0x4A, 0x75, 0x00, 0x02, 0x4A, 0x75, 0x00,  0x00, 0xB8, 0x1B, 0x01, 0x00, 0x01, 0x00, 0x00,
                            0x00, 0xB0, 0x9A, 0x00, 0x02, 0xB0, 0x9A, 0x00,  0x00, 0xB8, 0x1B, 0x01, 0x00, 0x01, 0x00, 0x00,
                            0x00, 0x14, 0x9B, 0x00, 0x02, 0x14, 0x9B, 0x00,  0x00, 0xB8, 0x1B, 0x01, 0x00, 0x01, 0x00, 0x00,
                            0x00, 0x78, 0x9B, 0x00, 0x02, 0x78, 0x9B, 0x00,  0x00, 0xB8, 0x1B, 0x01, 0x00, 0x01, 0x00, 0x00,
                            0x00, 0x79, 0x9B, 0x00, 0x02, 0x79, 0x9B, 0x00,  0x00, 0xB8, 0x1B, 0x01, 0x00, 0x01, 0x00, 0x00,
                            0x00, 0x7A, 0x9B, 0x00, 0x02, 0x7A, 0x9B, 0x00,  0x00, 0xB8, 0x1B, 0x01, 0x00, 0x01, 0x00, 0x00,
                            0x00, 0x7B, 0x9B, 0x00, 0x02, 0x7B, 0x9B, 0x00,  0x00, 0xB8, 0x1B, 0x01, 0x00, 0x01, 0x00, 0x00,
                            0x00, 0x7C, 0x9B, 0x00, 0x02, 0x7C, 0x9B, 0x00,  0x00, 0xB8, 0x1B, 0x01, 0x00, 0x01, 0x00, 0x00,
                            0x00, 0x7D, 0x9B, 0x00, 0x02, 0x7D, 0x9B, 0x00,  0x00, 0xB8, 0x1B, 0x01, 0x00, 0x01, 0x00, 0x00,
                            0x00, 0x7E, 0x9B, 0x00, 0x02, 0x7E, 0x9B, 0x00,  0x00, 0xB8, 0x1B, 0x01, 0x00, 0x01, 0x00, 0x00,
                            0x00, 0x7F, 0x9B, 0x00, 0x02, 0x7F, 0x9B, 0x00,  0x00, 0xB8, 0x1B, 0x01, 0x00, 0x01, 0x00, 0x00,
                            0x00, 0x80, 0x9B, 0x00, 0x02, 0x80, 0x9B, 0x00,  0x00, 0xB8, 0x1B, 0x01, 0x00, 0x01, 0x00, 0x00,
                            0x00, 0x81, 0x9B, 0x00, 0x02, 0x81, 0x9B, 0x00,  0x00, 0xB8, 0x1B, 0x01, 0x00, 0x01, 0x00, 0x00,
                            0x00, 0xE6, 0x9B, 0x00, 0x02, 0xE6, 0x9B, 0x00,  0x00, 0xB8, 0x1B, 0x01, 0x00, 0x01, 0x00, 0x00,
                            0x00, 0xE7, 0x9B, 0x00, 0x02, 0xE7, 0x9B, 0x00,  0x00, 0xB8, 0x1B, 0x01, 0x00, 0x01, 0x00, 0x00,
                            0x00, 0xE8, 0x9B, 0x00, 0x02, 0xE8, 0x9B, 0x00,  0x00, 0xB8, 0x1B, 0x01, 0x00, 0x01, 0x00, 0x00,
                            0x00, 0xE9, 0x9B, 0x00, 0x02, 0xE9, 0x9B, 0x00,  0x00, 0xB8, 0x1B, 0x01, 0x00, 0x01, 0x00, 0x00,
                            0x00, 0x42, 0x9C, 0x00, 0x02, 0x42, 0x9C, 0x00,  0x00, 0xB8, 0x1B, 0x01, 0x00, 0x06, 0x00, 0x00,
                            0x00, 0x29, 0xA0, 0x00, 0x02, 0x29, 0xA0, 0x00,  0x00, 0xB8, 0x1B, 0x01, 0x00, 0x1C, 0x00, 0x00,
                            0x00, 0x2A, 0xA0, 0x00, 0x02, 0x2A, 0xA0, 0x00,  0x00, 0xB8, 0x1B, 0x01, 0x00, 0x0A, 0x00, 0x00,
                            0x00, 0x2B, 0xA0, 0x00, 0x02, 0x2B, 0xA0, 0x00,  0x00, 0xB8, 0x1B, 0x01, 0x00, 0x10, 0x00, 0x00,
                            0x00, 0x2C, 0xA0, 0x00, 0x02, 0x2C, 0xA0, 0x00,  0x00, 0xB8, 0x1B, 0x01, 0x00, 0x0A, 0x00, 0x00,
                            0x00, 0x2E, 0xA0, 0x00, 0x02, 0x2E, 0xA0, 0x00,  0x00, 0xB8, 0x1B, 0x01, 0x00, 0x21, 0x00, 0x00,
                            0x00, 0x2F, 0xA0, 0x00, 0x02, 0x2F, 0xA0, 0x00,  0x00, 0xB8, 0x1B, 0x01, 0x00, 0x0A, 0x00, 0x00,
                            0x00, 0x30, 0xA0, 0x00, 0x02, 0x30, 0xA0, 0x00,  0x00, 0xB8, 0x1B, 0x01, 0x00, 0x08, 0x00, 0x00,
                            0x00, 0x31, 0xA0, 0x00, 0x02, 0x31, 0xA0, 0x00,  0x00, 0xB8, 0x1B, 0x01, 0x00, 0x06, 0x00, 0x00,
                            0x00, 0x11, 0xA4, 0x00, 0x02, 0x11, 0xA4, 0x00,  0x00, 0xB8, 0x1B, 0x01, 0x00, 0x18, 0x00, 0x00,
                            0x00, 0xE1, 0xAB, 0x00, 0x02, 0xE1, 0xAB, 0x00,  0x00, 0xB8, 0x1B, 0x01, 0x00, 0x05, 0x00, 0x00,
                            0x00, 0xE5, 0xAB, 0x00, 0x02, 0xE5, 0xAB, 0x00,  0x00, 0xB8, 0x1B, 0x01, 0x00, 0x03, 0x00, 0x00,
                            0x00, 0xC9, 0xAF, 0x00, 0x02, 0xC9, 0xAF, 0x00,  0x00, 0xB8, 0x1B, 0x01, 0x00, 0x02, 0x00, 0x00,
                            0x00, 0x94, 0x5F, 0x01, 0x02, 0x94, 0x5F, 0x01,  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                            0x00, 0x00,
                        ]
                    }).await);
                }

                if command.magic.id == CommandId::AcCmdCLRequestLeagueInfo {
                    send_result = Some(send_command(&mut buf, &mut socket, &mut Command {
                        magic: Magic {
                            id: CommandId::AcCmdCLRequestLeagueInfoOK,
                            length: 0,
                        },
                        payload: vec![
                            0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x12, 0x01, 0x01, 0x01,  0x00, 0x00, 0x34, 0x01, 0x00
                        ]
                    }).await);
                }

                if let Some(Err(e)) = send_result {
                    eprintln!("{}", e);
                    break;
                }
            }
            println!("Connection closed");
        });
    }
}

async fn send_command(buf: &mut [u8], socket: &mut tokio::net::TcpStream, command: &mut Command) -> Result<(), String> {
    command.magic.length = (size_of::<u32>()+command.payload.len()) as u16;
    command.to_slice(buf).map_err(|err| format!("Error serializing command: {}", err))?;
    socket.write(&buf[0..(command.magic.length as usize)]).await.map_err(|err| format!("Error sending command: {:?}", err))?;
    println!(">>> Sent command {:?}:\n\t{}\n\n", command.magic.id, pretty_hex(&command.payload));
    Ok(())
}