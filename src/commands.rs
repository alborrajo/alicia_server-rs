#![macro_use]

use std::{
    fmt::Debug,
    io::{Read, Seek, Write},
};

use deku::{DekuReader, DekuWriter, error::DekuError, reader::Reader, writer::Writer};

use crate::packet::{CommandId, Packet};

pub mod lobby;

pub trait Command:
    for<'a> DekuReader<'a>
    + DekuWriter
    + for<'b> TryFrom<&'b Packet, Error = deku::error::DekuError>
    + TryInto<Packet, Error = deku::error::DekuError>
    + Debug
{
    const ID: CommandId;
}

#[macro_export]
macro_rules! impl_command_traits {
    ($t:ty, $id:expr) => {
        impl crate::commands::Command for $t {
            const ID: crate::packet::CommandId = $id;
        }
        impl std::convert::TryFrom<&crate::packet::Packet> for $t {
            type Error = deku::DekuError;
            fn try_from(packet: &crate::packet::Packet) -> Result<Self, Self::Error> {
                if packet.command_id != <$t as crate::commands::Command>::ID {
                    return Err(deku::DekuError::InvalidParam(
                        "Attempted to convert a packet with a wrong command id".into(),
                    ));
                }
                let mut cursor = std::io::Cursor::new(&packet.payload);
                let mut reader = deku::reader::Reader::new(&mut cursor);
                use deku::DekuReader;
                Self::from_reader_with_ctx(&mut reader, ())
            }
        }
        impl std::convert::TryInto<crate::packet::Packet> for $t {
            type Error = deku::DekuError;
            fn try_into(self) -> Result<crate::packet::Packet, Self::Error> {
                let mut buf = [0u8; crate::packet::MAX_PAYLOAD_SIZE];
                let bytes_written = {
                    let mut cursor = std::io::Cursor::new(&mut buf[..]);
                    let mut writer = deku::writer::Writer::new(&mut cursor);
                    use deku::DekuWriter;
                    self.to_writer(&mut writer, ())?;
                    writer.bits_written / 8
                };
                Ok(crate::packet::Packet {
                    command_id: <$t as crate::commands::Command>::ID,
                    payload: buf[0..bytes_written].to_vec(),
                })
            }
        }
    };
}

#[derive(Debug, Default)]
pub struct LengthPrefixedVec<const BYTES: usize, T: for<'a> DekuReader<'a> + DekuWriter + Default> {
    pub vec: Vec<T>,
}
impl<'a, const BYTES: usize, T> DekuReader<'a> for LengthPrefixedVec<BYTES, T>
where
    T: for<'b> DekuReader<'b> + DekuWriter + Default,
{
    fn from_reader_with_ctx<R: Read + Seek>(
        reader: &mut Reader<R>,
        ctx: (),
    ) -> Result<Self, DekuError>
    where
        Self: Sized,
    {
        let mut length_bytes = [0u8; 8];
        reader.read_bytes(BYTES, &mut length_bytes, deku::ctx::Order::Lsb0)?;
        let length = usize::from_le_bytes(length_bytes);
        let mut vec = Vec::with_capacity(length);
        for _ in 0..length {
            let item = T::from_reader_with_ctx(reader, ctx)?;
            vec.push(item);
        }
        Ok(LengthPrefixedVec::<BYTES, T> { vec })
    }
}
impl<'a, const BYTES: usize, T> DekuWriter for LengthPrefixedVec<BYTES, T>
where
    T: for<'b> DekuReader<'b> + DekuWriter + Default,
{
    fn to_writer<W: Write + Seek>(&self, writer: &mut Writer<W>, ctx: ()) -> Result<(), DekuError> {
        let length_bytes = self.vec.len().to_le_bytes();
        length_bytes[0..BYTES].to_writer(writer, ctx)?;
        for item in &self.vec {
            item.to_writer(writer, ctx)?;
        }
        Ok(())
    }
}

#[cfg(test)]
mod tests {

    use crate::commands::lobby::login::LoginOk;

    use super::*;

    #[test]
    fn test_command_deserialization() {
        let packet = Packet {
            command_id: CommandId::AcCmdCLLoginOK,
            payload: vec![
                0x2E, 0xC3, 0x87, 0xD6, 0x31, 0xD3, 0xDB, 0x01, 0x94, 0xA7, 0x0C, 0x00, 0xE8, 0xE2,
                0x06, 0x00, 0x72, 0x67, 0x6E, 0x74, 0x00, 0x57, 0x65, 0x6C, 0x63, 0x6F, 0x6D, 0x65,
                0x20, 0x74, 0x6F, 0x20, 0x53, 0x74, 0x6F, 0x72, 0x79, 0x20, 0x6F, 0x66, 0x20, 0x41,
                0x6C, 0x69, 0x63, 0x69, 0x61, 0x21, 0x00, 0x01, 0x54, 0x68, 0x69, 0x73, 0x20, 0x70,
                0x65, 0x72, 0x73, 0x6F, 0x6E, 0x20, 0x69, 0x73, 0x20, 0x6D, 0x65, 0x6E, 0x74, 0x61,
                0x6C, 0x6C, 0x79, 0x20, 0x75, 0x6E, 0x73, 0x74, 0x61, 0x62, 0x6C, 0x65, 0x00, 0x01,
                0x01, 0x00, 0x00, 0x00, 0x38, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
                0x00, 0x00, 0x01, 0x28, 0x4E, 0x00, 0x02, 0x28, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x01, 0x00, 0x00, 0x00, 0xA1, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x30, 0x61, 0x00,
                0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x19, 0x00, 0x00, 0x00, 0x0C, 0x01, 0x00, 0x16,
                0x57, 0x02, 0x00, 0x15, 0x41, 0x03, 0x00, 0x17, 0x44, 0x04, 0x00, 0x18, 0x53, 0x05,
                0x00, 0x12, 0x13, 0x06, 0x00, 0x82, 0x83, 0x07, 0x00, 0x20, 0x2F, 0x08, 0x00, 0x46,
                0x00, 0x09, 0x00, 0x52, 0x00, 0x0A, 0x00, 0x19, 0x00, 0x0B, 0x00, 0x0F, 0x00, 0x0C,
                0x00, 0x43, 0x00, 0x2F, 0x77, 0x69, 0x6E, 0x6B, 0x2F, 0x77, 0x61, 0x76, 0x65, 0x00,
                0x54, 0x68, 0x61, 0x6E, 0x6B, 0x20, 0x79, 0x6F, 0x75, 0x21, 0x20, 0x2F, 0x68, 0x65,
                0x61, 0x72, 0x74, 0x00, 0x2F, 0x66, 0x69, 0x72, 0x65, 0x2F, 0x66, 0x69, 0x72, 0x65,
                0x2F, 0x66, 0x69, 0x72, 0x65, 0x20, 0x46, 0x69, 0x72, 0x65, 0x21, 0x20, 0x2F, 0x66,
                0x69, 0x72, 0x65, 0x2F, 0x66, 0x69, 0x72, 0x65, 0x2F, 0x66, 0x69, 0x72, 0x65, 0x00,
                0x2F, 0x73, 0x61, 0x64, 0x2F, 0x63, 0x72, 0x79, 0x20, 0x53, 0x6F, 0x72, 0x72, 0x79,
                0x21, 0x20, 0x2F, 0x63, 0x72, 0x79, 0x2F, 0x73, 0x61, 0x64, 0x00, 0x2F, 0x2D, 0x74,
                0x61, 0x64, 0x61, 0x20, 0x43, 0x6F, 0x6E, 0x67, 0x72, 0x61, 0x74, 0x75, 0x6C, 0x61,
                0x74, 0x69, 0x6F, 0x6E, 0x73, 0x21, 0x21, 0x21, 0x20, 0x2F, 0x74, 0x61, 0x64, 0x61,
                0x00, 0x2F, 0x63, 0x6C, 0x61, 0x70, 0x20, 0x47, 0x6F, 0x6F, 0x64, 0x20, 0x47, 0x61,
                0x6D, 0x65, 0x21, 0x20, 0x2F, 0x2D, 0x63, 0x6C, 0x61, 0x70, 0x00, 0x42, 0x65, 0x20,
                0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x62, 0x61, 0x63, 0x6B, 0x21, 0x20, 0x50, 0x6C,
                0x65, 0x61, 0x73, 0x65, 0x20, 0x77, 0x61, 0x69, 0x74, 0x20, 0x66, 0x6F, 0x72, 0x20,
                0x6D, 0x65, 0x21, 0x20, 0x2F, 0x77, 0x69, 0x6E, 0x6B, 0x00, 0x53, 0x65, 0x65, 0x20,
                0x79, 0x6F, 0x75, 0x21, 0x20, 0x2F, 0x73, 0x6D, 0x69, 0x6C, 0x65, 0x2F, 0x77, 0x61,
                0x76, 0x65, 0x00, 0x64, 0x00, 0x00, 0x00, 0x13, 0x00, 0x07, 0x18, 0x00, 0x01, 0x02,
                0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x23, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x29, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2A, 0x00,
                0x01, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2B, 0x00, 0x01, 0x02, 0x00,
                0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2E, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x01, 0x2E, 0x27, 0x00, 0x00, 0x00, 0x00,
                0x0A, 0x01, 0x02, 0x01, 0xFF, 0xFF, 0x04, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00,
                0xFF, 0x00, 0x96, 0xA3, 0x79, 0x05, 0x21, 0x4E, 0x00, 0x00, 0x69, 0x64, 0x6F, 0x6E,
                0x74, 0x75, 0x6E, 0x64, 0x65, 0x72, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x00, 0x01, 0x04,
                0x04, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,
                0x00, 0x09, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x15, 0x01, 0x05, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x1E, 0x00,
                0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE4,
                0x67, 0xA1, 0xB8, 0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0xFF, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFE, 0x01,
                0x00, 0x00, 0x21, 0x04, 0x00, 0x00, 0xF8, 0x05, 0x00, 0x00, 0xA4, 0xCF, 0x00, 0x00,
                0xE4, 0x67, 0xA1, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x06, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00,
                0x00, 0x02, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x30, 0x75, 0x00,
                0x00, 0x35, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x2B, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
                0xDB, 0x87, 0x1B, 0xCA, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x96, 0xA3, 0x79, 0x05, 0x12, 0x00, 0x00,
                0x00, 0xE4, 0x67, 0x6E, 0x01, 0x3A, 0x00, 0x00, 0x00, 0x8E, 0x03, 0x00, 0x00, 0xC6,
                0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00,
            ],
        };
        let command = LoginOk::try_from(&packet).unwrap();
        println!(
            "Deserialized command {:?}:\n{:#?}\n",
            packet.command_id, command
        );
        assert_eq!(command.nick_name.as_c_str(), c"rgnt");

        let packet2: Packet = command.try_into().unwrap();
        assert_eq!(packet.command_id, packet2.command_id);
        assert_eq!(packet.payload, packet2.payload);
    }
}
