{
	// Place your Ã¡rea de trabajo de alicia_server-rs snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Handler": {
		"scope": "rust",
		"prefix": "handler",
		"body": [
			"use std::sync::Arc;",
			"",
			"use tokio::sync::Mutex;",
			"",
			"use crate::{",
			"    handlers::CommandHandler,",
			"    impl_packet_handler,",
			"    server::{Server, Session},",
			"};",
			"",
			"pub struct $1Handler {}",
			"impl CommandHandler for $1Handler {",
			"    type CommandType = $1;",
			"    async fn handle_command(",
			"        server: Arc<Mutex<Server>>,",
			"        session: &mut Session,",
			"        command: &Self::CommandType,",
			"    ) -> Result<(), String> {",
			"        let response = $1Ok::default();",
			"        session",
			"            .send_command(response)",
			"            .await",
			"            .map_err(|e| format!(\"Failed to send response: {:?}\", e))",
			"    }",
			"}",
			"impl_packet_handler!($1Handler);"
		],
		"description": "Creates a handler for a command."
	}
}